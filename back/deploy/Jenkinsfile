pipeline {
    agent any

    environment {
        /* Jenkins credentials */
        AWS_ECR_CREDENTIAL_ID = 'ecr-user'
        AWS_S3_CREDENTIAL_ID = 's3-credential'
        VM_ENTER_CREDENTIAL_ID = 'vm-ssh-credential' // elice VM에 접속하기 위한 credential

        /* AWS Infos */
        ACCOUNT_ID = '014276069644'
        AWS_REGION = 'ap-northeast-2'
        ECR_REPO = '014276069644.dkr.ecr.ap-northeast-2.amazonaws.com/eeum-backend'

        /* S3 Info */
        BUCKET_NAME = 'eeum-config-bucket'

        /* VM Info */
        TARGET_HOST = '34.22.81.164'

        /* Container Info */
        CONTAINER_NAME = 'eeum-backend'
        CONTAINER_PORT = 3500
    }

    stages {
        stage('Checkout') {
            steps {
                deleteDir() // 이전에 가져온 소스 코드를 모두 삭제
                checkout scm
                sh 'git checkout develop'
            }
        }

        stage('Set the environment') {
            steps {
                sh "mkdir logs"

                withAWS(region: "${AWS_REGION}", credentials: "${AWS_S3_CREDENTIAL_ID}") {
                    // S3로부터 .env 파일 다운로드
                    s3Download(file: "${env.WORKSPACE}/.env", bucket: "${BUCKET_NAME}", path: 'backend/.env', force: true)
                    // S3로부터 credentials 파일 다운로드
                    s3Download(file: "${env.WORKSPACE}/credentials", bucket: "${BUCKET_NAME}", path: 'backend/credentials', force: true)
                }
            }
        }

        stage('Docker build') {
            steps {
                sh "docker build --no-cache -t ${ECR_REPO}:latest ."
            }
        }

        stage('Push to ECR') {
            steps {
                script {
                    // docker push
                    docker.withRegistry("https://${ECR_REPO}", "ecr:${AWS_REGION}:${AWS_ECR_CREDENTIAL_ID}") {
                        docker.image("${ECR_REPO}:latest").push()
                    }
                }
            }
        }

        stage('Deploy to VM') {
            steps {
                script {
                    sshagent(credentials: ["${VM_ENTER_CREDENTIAL_ID}"]) {
                        sh """
                                ssh -o StrictHostKeyChecking=no elice@${TARGET_HOST} '
                                    sudo chmod 777 /var/run/docker.sock
                                    aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${ACCOUNT_ID}.dkr.ecr.ap-northeast-2.amazonaws.com/
                                    docker pull ${ECR_REPO}:latest
                                    if [[ \$(docker ps -a --filter name=${CONTAINER_NAME} --format "{{.Names}}") == ${CONTAINER_NAME} ]]; then
                                        docker stop ${CONTAINER_NAME} && docker rm ${CONTAINER_NAME}
                                    fi
                                    docker run -d -p ${CONTAINER_PORT}:${CONTAINER_PORT} --name ${CONTAINER_NAME} ${ECR_REPO}:latest
                                '
                            """
                    }
                }
            }
        }
    }
}
